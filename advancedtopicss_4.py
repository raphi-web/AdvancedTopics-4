# -*- coding: utf-8 -*-
"""AdvancedTopicss-4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PLYsNaQGpnnBI5XW7RGacs0qThh4Y_oF
"""

!git clone https://github.com/raphi-web/AdvancedTopics-4.git

!unzip AdvancedTopics-4/Gemeindegrenzen.zip -d AdvancedTopics-4/Gemeindegrenzen

!unzip AdvancedTopics-4/Krankenanstalten.zip -d AdvancedTopics-4/Krankenanstalten

!pip install allagash[geopandas] -q
!pip install mapclassify -q

import geopandas as gpd
import pandas as pd
from scipy.spatial import KDTree
from shapely.geometry import LineString,Point
import matplotlib.pyplot as plt
import numpy as np
import warnings
from allagash import Coverage, Problem
import pulp
import warnings
warnings.filterwarnings("ignore")

#Load the Files into Dataframes
df_gem = gpd.read_file("/content/AdvancedTopics-4/Gemeindegrenzen/Gemeindegrenzen.shp")
df_krank = gpd.read_file("/content/AdvancedTopics-4/Krankenanstalten/Krankenanstalten.shp")
df_reg = pd.read_csv("/content/AdvancedTopics-4/STMK_REGION_2020.csv",sep=";",encoding="iso8859_2")

# Reproject to UTM
df_gem = df_gem.to_crs("EPSG:32633")
df_krank = df_krank.to_crs("EPSG:32633")

# Merge Districts and Population Dataframes
df_gem["GEMNR6"] = pd.to_numeric(df_gem["GEMNR6"])
df_gem = df_gem.merge(df_reg,left_on="GEMNR6",right_on="LAU_CODE")

# Compute Centroids
df_gem_cent = df_gem.copy()
df_gem_cent.geometry = df_gem_cent.geometry.centroid

# Create Supply and demand Dataframes
supply_df = df_krank.copy()
demand_df = df_gem_cent.copy()
supply_df = supply_df[["OBJECTID","geometry"]]
demand_df = demand_df[["GEMNR6","POP_TOTAL","geometry"]]
demand_df['POP_TOTAL'] = [float(x) for x in demand_df["POP_TOTAL"]]

print("Demand:",len(demand_df))
print("Supply:",len(supply_df))

# Use nearest Neighbour to Estimate a first Service Radius
def est_service_radi(service, demand):
      tree = KDTree([[p.x,p.y] for p in service])
      distances, idxs = tree.query([[p.x,p.y] for p in demand])
      max_dist =max(distances)
      nearest_points = [service[i] for i in idxs]
      return  max_dist,distances, nearest_points

start_radi, distances, nearest_services = est_service_radi(supply_df.geometry,demand_df.geometry)
max_dist_gem = demand_df[distances==start_radi]
print(f"Estimated Service Radius: {start_radi}")



# Plot the Poulation
fig,ax=plt.subplots(figsize=(15,9))
df_gem.plot(column="POP_TOTAL",alpha=1,edgecolor="black", zorder = 0,scheme="quantiles",legend=True,ax=ax,cmap="Blues")
df_gem.dissolve(by="BEZNR6").boundary.plot(ax=ax, edgecolor="red",zorder=1,label="District")
ax.set_title("Population of Styrian Municipalities")
ax.set_ylim(5.16*1e6, 5.3*1e6)
ax.set_xlim(380000,600000)
plt.tight_layout()
plt.savefig("Population.png",dpi=200)
plt.show()

df_gem.head()

# Compute service radius
log = []
step = 500 # accuracy 500 meter
radi = 0
coverd_frac = 0
while coverd_frac < 100:
  log.append((radi,coverd_frac))
  supply_buf = supply_df.copy()
  supply_buf.geometry = supply_df.geometry.buffer(radi)
  coverage = Coverage.from_geodataframes(
      demand_df,
      supply_buf,
      demand_id_col="GEMNR6",
      supply_id_col='OBJECTID',
      demand_col="POP_TOTAL")

  problem = Problem.mclp([coverage],max_supply={coverage: len(supply_buf)})
  problem.solve(pulp.PULP_CBC_CMD(msg=False))
  coverd_frac = (problem.pulp_problem.objective.value() / demand_df["POP_TOTAL"].sum()*100)
  radi += step

print(f"Service Radius: {(radi/1000):0.2f} km, covered {coverd_frac:0.2f}")

fig,ax=plt.subplots()
plt.plot(
    [x/1000 for x,y in log],
    [y for x,y in log]
)
plt.savefig("Covered Population with increasing Service Radius")
ax.set_xlabel("Service Radius [km]")
ax.set_ylabel("Population covered [%]")
ax.set_title("Covered Population with increasing Service Radius")


ax.set_xlim(0,(log[-1][0]/1000) % 2 + 4)
ax.set_xticks(range(0,34,2))
ax.set_ylim(0,105)
ax.set_yticks(range(0,110,10))
plt.tight_layout()
plt.savefig("CountCovered.png",dpi=200)
plt.show()

# get the choosen Hospitals and the district with highest distance to hospital
loc_mask = supply_df['OBJECTID'].isin(map(lambda x: int(x),problem.selected_supply(coverage)))
selected_loc_df = supply_df[loc_mask]

selected_loc_df.index = range(0,len(selected_loc_df))
max_d, distances, nearest_services = est_service_radi(selected_loc_df.geometry,demand_df.geometry)
max_dist_gem = demand_df[distances==max_d]
print(max_dist_gem)

# Visualize  service radius with  Hospitals
fig,ax=plt.subplots(figsize=(16,9))
df_gem.plot(ax=ax,color="black",alpha=0.2,edgecolor="black", zorder = 0)

for s,d in zip(nearest_services, demand_df.geometry):
  plt.plot([s.x,d.x],[s.y,d.y],color="black",linewidth=0.3,zorder=2)

selected_loc_df.geometry.buffer(radi).plot(ax=ax,color="orange",alpha=0.05,edgecolor="red",zorder=1,label="Service Radius")
selected_loc_df.plot(ax=ax,color="red",markersize=10,zorder=4, label="Hospitals")
demand_df.plot(ax=ax, color="green", markersize=7,zorder=3, label="District centroids")
max_dist_gem.plot(ax=ax,color='blue',markersize=30,zorder=5, label="District with longest distance to hospital")
plt.legend()
ax.set_ylim(5.16*1e6, 5.3*1e6)
ax.set_xlim(380000,600000)
ax.set_title("Service Radius and Hospitals")
plt.savefig("SrHospitals.png",dpi=200)
plt.show()

# add new hospital to supply_df
supply_df_new_host = supply_df.copy()
supply_df_new_host.loc[len(supply_df_new_host)] = [len(supply_df_new_host)+1, max_dist_gem.geometry.to_list()[0]]

# Compute new service radius

step = 500 # accuracy 500 meter
radi = 0
coverd_frac = 0
while coverd_frac < 100:
  supply_buf = supply_df_new_host.copy()
  supply_buf.geometry = supply_df_new_host.geometry.buffer(radi)

  coverage = Coverage.from_geodataframes(
      demand_df,
      supply_buf,
      demand_id_col="GEMNR6",
      supply_id_col='OBJECTID',
      demand_col="POP_TOTAL")

  problem = Problem.mclp([coverage],max_supply={coverage: len(supply_buf)})
  problem.solve(pulp.PULP_CBC_CMD(msg=False))
  coverd_frac = (problem.pulp_problem.objective.value() / demand_df["POP_TOTAL"].sum()*100)
  radi += step

print(f"Service Radius: {(radi/1000):2f} km, covered {coverd_frac:2f}")

loc_mask = supply_df_new_host['OBJECTID'].isin(map(lambda x: int(x),problem.selected_supply(coverage)))
selected_loc_df = supply_df_new_host[loc_mask]
selected_loc_df.index = range(0,len(selected_loc_df))
max_d, distances, nearest_services = est_service_radi(selected_loc_df.geometry,demand_df.geometry)
max_dist_gem = demand_df[distances==max_d]

# plot hospitals with new hospital location and service radius
fig,ax=plt.subplots(figsize=(16,9))
df_gem.plot(ax=ax,color="black",alpha=0.2,edgecolor="black", zorder = 0)

for s,d in zip(nearest_services, demand_df.geometry):
  plt.plot([s.x,d.x],[s.y,d.y],color="black",linewidth=0.3,zorder=2)

selected_loc_df.geometry.buffer(radi).plot(ax=ax,color="orange",alpha=0.05,edgecolor="red",zorder=1,label="Service Radius")
selected_loc_df.plot(ax=ax,color="red",markersize=10,zorder=4, label="Hospitals")
demand_df.plot(ax=ax, color="green", markersize=7,zorder=3, label="District centroids")
max_dist_gem.plot(ax=ax,color='blue',markersize=30,zorder=5, label="District with longest distance to hospital")
plt.legend()
ax.set_ylim(5.16*1e6, 5.3*1e6)
ax.set_xlim(380000,600000)
ax.set_title("Choosen hospitals with new Hospital and Service Radius")
plt.savefig("HospitalNew.png",dpi=200)
plt.show()